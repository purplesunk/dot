#!/bin/bash

declare installation_path
installation_path="$XDG_DATA_HOME/fonts"

lookup_fonts() {
  local fonts
  fonts=$(curl -sSL 'https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest' | \
    grep -E 'browser.*tar')
  fonts=${fonts//\"browser_download_url\":/}
  fonts=${fonts//\"/}
  echo "$fonts"
}

font_name() {
  local font="$1"
  font=${font##*\/}
  font=${font%%.*}
  font=${font,,}
  echo "$font"
}

list_fonts() {
  local fonts font
  fonts="$(lookup_fonts)"
  [[ -z "$fonts" ]] && \
    echo 'Unable to get the fonts' && exit 1
  for font in $fonts
  do
    font_name "$font"
  done
}

set_install_path() {
  local path="$1"
  if [[ -d "$path" && -w "$path" ]]; then
    installation_path="$path"
  else
    echo "$path invalid directory"
    exit 1
  fi
}

download_font() {
  local url font download_path install_path
  url="$1"
  font="$2"
  download_path="/tmp/$font.tar.xz"
  install_path="$installation_path/${font}-nerdfont"
  curl -L "$url" -o "$download_path"
  [[ ! -f "$download_path" ]] && \
    echo "Could not download the $font" && return 1
  mkdir -p "$install_path"
  tar xJf "$download_path" -C "$install_path" && echo "$font installed"
}

check_font() {
  local data font name
  data="$1"
  font="$2"
  for url in $data;
  do
    name="$(font_name "$url")"
    [[ "$font" = "$name" ]] && \
      download_font "$url" "$font" && \
      return 0
  done
  echo "$font not found" && return 1
}

search_fonts() {
  local data input
  local url font
  input="$1"
  data=$(lookup_fonts)
  for font in $input;
  do
    check_font "$data" "$font"
  done
}

declare fonts=""
declare read_output=0
for arg in "$@"; do
  case "$arg" in
  list) list_fonts "$(lookup_fonts)";;
  output) read_output=1;;
  *)
  if [[ "$read_output" -eq 1 ]]; then
    set_install_path "$arg";
    read_output=0;
  else
    fonts+=" $arg";
  fi;;
  esac
done
[[ -n "$fonts" ]] && search_fonts "$fonts"

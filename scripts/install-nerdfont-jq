#!/bin/sh

# Check for jq
_have() { type "$1" 2>&1 1>/dev/null; }
! _have jq && echo 'Requires jq' && exit 1

installation_path="$XDG_DATA_HOME/fonts"

lookup_fonts() {
  curl -sSL 'https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest' | \
    jq '.assets
      | map(select(.content_type == "application/x-xz")
      | .name |= sub("\\.tar\\.xz"; "") | .name |= ascii_downcase
      | { name: .name, url: .browser_download_url })'
}

list_fonts() {
  lookup_fonts | jq -r '.[].name' && exit 0 || \
    echo 'Unable to look for the fonts' && \
    exit 1
}

set_install_path() {
  path="$1"
  if [ -d "$path" ] && [ -w "$path" ]; then
    installation_path="$path"
  else
    echo "$path invalid directory"
    exit 1
  fi
}

download_font() {
  url="$1"
  font="$2"
  download_path="/tmp/$font.tar.xz"
  install_path="$installation_path/${font}-nerdfont"
  curl -L "$url" -o "$download_path"
  [ ! -f "$download_path" ] && \
    echo "Could not download the $font" && return 1
  mkdir -p "$install_path"
  tar xJf "$download_path" -C "$install_path" && echo "$font installed"
}

search_fonts() {
  input="$1"
  data=$(lookup_fonts)
  for font in $input;
  do
    url=$(echo "$data" | jq -r '.[] | select(.name == "'"$font"'") | .url')
    [ -z "$url" ] && echo "$font not found" && continue
    download_font "$url" "$font"
  done
}

fonts=""
read_output=0
for arg in "$@"; do
  case "$arg" in
  list) list_fonts;;
  output) read_output=1;;
  *) 
  if [ "$read_output" -eq 1 ]; then
    set_install_path "$arg";
    read_output=0;
  else
    fonts="$fonts $arg";
  fi;;
  esac
done

[ -n "$fonts" ] && search_fonts "$fonts"
